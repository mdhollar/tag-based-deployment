---
- name: Generate Economizer RCx Generator Config
  ansible.builtin.template:
    src: economizer_rcx_generator_config.j2
    dest: "{{ host_configs_dir }}/economizer_rcx_generator_config.json"

- name: Copy JSON Sources
  ansible.posix.synchronize:
    src: "{{ economizer_rcx_generator.json.source_path }}"
    dest: "{{ host_configs_dir }}"
  when: site_info.data_source == 'json'

- name: Run Economizer RCx Generator from JSON
  ansible.builtin.shell:
    cmd: "{{ venv_for_ansible }}/bin/config-gen-json.economizerrcx {{ host_configs_dir }}/economizer_rcx_generator_config.json"
    chdir: "{{ ansible_env.HOME }}/config_generators/src/volttron/haystack/parser/airside_economizer/"
  register: generator_return_json
  failed_when: generator_return_json.rc < 0 or generator_return_json.rc > 1
  when: site_info.data_source == 'json'

- name: Report Generator Errors from JSON
  ansible.builtin.copy:
    dest: economizer_rcx_issues.json
    content: "{{ generator_return_json.stderr }}"
  when: generator_return_json.rc | default('') == 1

- name: Run Economizer RCx Generator from Database
  ansible.builtin.shell:
    cmd: "{{ ansible_python_interpreter }} config_intellimation.py {{ host_configs_dir }}/economizer_rcx_generator_config.json"
    chdir: "{{ ansible_env.HOME }}/config_generators/src/volttron/haystack/parser/airside_economizer/intellimation"
  register: generator_return_db
  failed_when: generator_return_db.rc < 0 or generator_return_db.rc > 1
  when: site_info.data_source == 'db'

- name: Report Generator Errors from Database
  ansible.builtin.copy:
    dest: economizer_rcx_issues.json
    content: "{{ generator_return_db.stderr }}"
  when: generator_return_db.rc | default('') == 1

- name: Fetch Generator Error Report
  ansible.builtin.fetch:
    dest: "{{ generator_reports_dir }}/{{ inventory_hostname }}/economizer_rcx_issues.json"
    src: "{{ host_configs_dir }}/economizer_rcx/errors/unmapped_device_details" # economizer_rcx_issues.json
    flat: yes
  when: (generator_return_json.rc is defined and generator_return_json.rc == 1) or (generator_return_db.rc is defined and generator_return_db.rc == 1)

- name: Find Generated Files
  ansible.builtin.find:
    paths: "{{ host_configs_dir }}/economizer_rcx/configs"
    excludes: "unmapped_device_details"
  register: economizer_rcx_configs

# TODO: Remove this once it is possible to perform bulk config updates while volttron is running.
- name: Shutdown VOLTTRON if Running
  ansible.builtin.systemd:
    name: volttron
    enabled: yes
    state: stopped
  become: yes

- name: Load VOLTTRON Economizer RCx Configurations
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: economizer_rcx_config_set
  loop: "{{ economizer_rcx_configs.files }}"

- name: Install Economizer RCx Config
  ansible.builtin.shell:
    cmd: "{{ volttron_venv }}/bin/vcfg --vhome {{ volttron_home }} update-config-store --metadata-file configs/economizer_rcx"

- name: Setup Agent Installs
  set_fact:
    agents_to_install: "{{ 
    agents_to_install | default({}) | combine({ agent_vip_prefix + '.' + ( item.device.unit | dict2items | map(attribute='key') | first ) : config_dict })
    }}"
  loop: "{{ economizer_rcx_config_set.results | map(attribute='content') | map('b64decode') | map('from_json') }}"
  vars:
    config_dict:
      agent_source: '{{ ansible_env.HOME }}/volttron-pnnl-applications/EnergyEfficiency/EconomizerRCxAgent/'
      agent_state: 'present'
      agent_enabled: True
      agent_priority: 50
      agent_running: true
      agent_tag: 'rcx'
      skip_requirements: False
      force_install: False
    agent_vip_prefix: "{{ economizer_rcx_generator.agent_vip_prefix | default('economizer') }}"
