 {
     "metadata": {
        "connection_params": {
                "dbname": "intellimation",
                "host": "127.0.0.1",
                "port": 5432,
                "user": "postgres",
                "password": "volttron"
            },
        "equip_table": "equipment",
        "point_table": "points"
        },
     "site_id": "r:intellimation.dc_dgs.dcps.brookland_ms",

     # optional. if not provided will be derived from site_id.split('.')[-2]
     #"campus": "dcps",

     # optional. if not provided will be derived from site_id.split('.')[-1]
     #"building": "anacostia_hs",

     # optional device name of whole building electric meter.
     # this should match the device name used by driver so that topic names match.
     # i.e. devices/<campus>/<building>/<building_power_meter> should be the topic prefix for the driver data
     #
     # haystack tag "siteMeter" is used to identify power meter. If no building_power_meter is provided in this config
     # power meter name is derived from id attribute of device and used as building power meter name

     #"building_power_meter": "",

     # optional building power meter id. If there are multiple entities with the tag "siteMeter" then provide the
     # id of the power meter to use for ILC

     #"power_meter_id": "r:intellimation.dc_dgs.dcps.brookland_ms.electric_meter_-_building",

     # metadata value to identify the specific points and hence its name in this setup
     # Should include all points used in control and criteria configs.
     "point_meta_map": {
            "WholeBuildingPower": "s:Mtr_kWh",
            "ZoneCoolingTemperatureSetPoint":  "s:EffZnTempSp",
            "MinimumAirFlow":"s:MinAirFlowSp",
            #  "ZoneAirFlowSetpoint": "s:SaFlow", # Not used for anacostia. Derived as ZoneAirFlow*MaxAirFlow/100
            "ZoneAirFlow": "s:SaFlow",
            "MaxAirFlow": "s:MaxAirFlowSP",
            "ZoneTemperature": "s:ZNTemp",
            "OccupancyCommand": "s:Occ"
        },

     # The field that contains the above point metadata
     "point_meta_field": "dis",

     # Optional directory where all generated configs should go
     #"output_dir":"ilc_configs_from_config1",

     "config_template": {

        # ###### Pairwise criteria #######
        # device type determines the pairwise criteria file used.
        # pairwise_criteria_<device_type>.json file from the data folder will be used for ILC
        # You can customize this json file for your needs. If you customize this json file, you could also
        # enable validation for this configuration file
        # Validation of pairwise_criteria uses ilc/utils/validate_pairwise.py

        "device_type": "vav",
        "validate_pairwise_criteria": false,

        # ########### ilc config template ########
        "ilc_config":{
            "demand_limit": "TRIGGER",
            "simulation_running": false,
            "control_time": 20,
            "control_confirm": 5,
            "average_building_power_window": 15,
            "stagger_release": true,
            "stagger_off_time": false
        },

        # ######### control config template ########
        "control_config":{
            "device_topic": "",
            "curtail_settings": {
                "load": "0.5",
                "control_method": "offset",
                "offset": 2.0,
                "minimum": 70.0,
                "maximum": 76.0,
                # only one curtail setting and one point per curtail setting?
                "point": "ZoneCoolingTemperatureSetPoint"
            },
            "device_status": {
                # More than one curtail possible?
                "curtail": {
                    "device_status_args": ["MinimumAirFlow", "ZoneAirFlow", "MaxAirFlow", "OccupancyCommand"],
                    "condition": ["(ZoneAirFlow*MaxAirFlow/100>MinimumAirFlow) & (Eq(OccupancyCommand, 0))"]
                }
            }
        },

        # ############ criteria config template #########
        "criteria_config":{
            "room_type": {
                "map_key": "Office",
                "operation_type": "mapper",
                "dict_name": "zone_type"
            },
            "available_zone_airflow_ratio": {
                    "operation_type": "formula",
                    "operation": "(ZoneAirFlow/MinimumAirFlow) - 1",
                    "minimum": 0.0,
                    "maximum": 10.0,
                    "operation_args": ["MinimumAirFlow, ZoneAirFlow"]
                    },
            "box_size": {
                    "operation_type": "formula",
                    "operation": "MaxAirFlow/10",
                    "minimum": 0.0,
                    "maximum": 100.0,
                    "operation_args": ["MaxAirFlow"]
                },
            "zonetemperature_setpoint": {
                    "operation": "1/(ZoneTemperature - ZoneCoolingTemperatureSetPoint)",
                    "operation_type": "formula",
                    "operation_args": {
                        "always": [
                            "ZoneTemperature"
                        ],
                        "nc": [
                            "ZoneCoolingTemperatureSetPoint"
                        ],
                        "minimum": 0.0,
                        "maximum": 10.0
                    }
            }
        }
    }
 }
