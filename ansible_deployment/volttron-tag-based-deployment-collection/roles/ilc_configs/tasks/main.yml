---
- name: Generate ILC Generator Config
  ansible.builtin.template:
    src: ilc_generator_config.j2
    dest: "{{ host_configs_dir }}/ilc_generator_config.json"

- name: Install Generator Scripts
  ansible.builtin.shell:
    cmd: "{{ ansible_python_interpreter }} {{ ansible_env.HOME }}/config_generators/setup.py install"
    chdir: "{{ ansible_env.HOME }}/config_generators"

- name: Copy JSON Sources
  ansible.posix.synchronize:
    src: "{{ ilc_generator.json.source_path }}"
    dest: "{{ host_configs_dir }}"
  when: site_info.data_source == 'json'

- name: Run ILC Generator from JSON
  ansible.builtin.shell:
    cmd: "{{ venv_for_ansible }}/bin/config-gen-json.ilc {{ host_configs_dir }}/ilc_generator_config.json"
    chdir: "{{ ansible_env.HOME }}/config_generators/src/volttron/haystack/parser/ilc/"
  register: generator_return_json
  failed_when: generator_return_json.rc < 0 or generator_return_json.rc > 1
  when: site_info.data_source == 'json'

- name: Report Generator Errors from JSON
  ansible.builtin.copy:
    dest: ilc_issues.json
    content: "{{ generator_return_json.stderr }}"
  when: generator_return_json.rc | default('') == 1

- name: Run ILC Generator from Database
  ansible.builtin.shell:
    cmd: "{{ ansible_python_interpreter }} config_intellimation.py {{ host_configs_dir }}/ilc_generator_config.json"
    chdir: "{{ ansible_env.HOME }}/config_generators/src/volttron/haystack/parser/ilc/intellimation"
  register: generator_return_db
  failed_when: generator_return_db.rc < 0 or generator_return_db.rc > 1
  when: site_info.data_source == 'db'

- name: Report Generator Errors from Database
  ansible.builtin.copy:
    dest: ilc_issues.json
    content: "{{ generator_return_db.stderr }}"
  when: generator_return_db.rc | default('') == 1

- name: Fetch Generator Error Report
  ansible.builtin.fetch:
    dest: "{{ generator_reports_dir }}/{{ inventory_hostname }}/ilc_issues.json"
    src: "{{ host_configs_dir }}/ilc/errors/unmapped_device_details" # ilc_issues.json
    flat: yes
  when: (generator_return_json.rc is defined and generator_return_json.rc == 1) or (generator_return_db.rc is defined and generator_return_db.rc == 1)

#- name: Find Generated Files
#  ansible.builtin.find:
#    paths: "{{ host_configs_dir }}/ilc/configs"
#    excludes: "unmapped_device_details"
#  register: ilc_configs
#
#- name: Install ILC Config
#  ansible.builtin.shell:
#    cmd: >
#      echo "{{ item.path }}" | sed s/\'/\"/g |
#      {{ volttron_venv }}/bin/vctl config store ilc.agent {{ item.path | basename }} "{{ item.path }}"
#  loop: "{{ ilc_configs.files }}"

# TODO: Remove this once it is possible to perform bulk config updates while volttron is running.
- name: Shutdown VOLTTRON if Running
  ansible.builtin.systemd:
    name: volttron
    enabled: yes
    state: stopped

- name: Install ILC Configs
  ansible.builtin.shell:
    cmd: "{{ volttron_venv }}/bin/vcfg --vhome {{ volttron_home }} update-config-store --metadata-file configs/ilc"

- name: Install ILC Dependencies
  ansible.builtin.pip:
    name:
      - sympy
      - transitions
    executable: "{{ volttron_venv }}/bin/pip"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"

#- name: Install ILC Agent
#  volttron.deployment.volttron_agent:
#    volttron_root: "{{ volttron_root }}"
#    volttron_home: "{{ volttron_home }}"
#    volttron_venv: "{{ volttron_venv }}"
#    agent_vip_id: "ilc.agent"
#    agent_spec: "{{ this_spec }}"
#  vars:
#    - this_spec: {
#                   agent_source: "{{ ansible_env.HOME }}/volttron-pnnl-applications/GridServices/Control/ILCAgent",
#                   agent_state: 'present',
#                   agent_enabled: True,
#                   agent_priority: 50,
#                   agent_running: true,
#                   agent_tag: 'ilc',
#                   skip_requirements: False,
#                   force_install: False
#                 }
