---
- name: Generate Driver Generator Config
  ansible.builtin.template:
    src: driver_generator_config.j2
    dest: "{{ host_configs_dir }}/driver_generator_config.json"

- name: Install Generator Scripts
  ansible.builtin.shell:
    cmd: "{{ ansible_python_interpreter }} {{ ansible_env.HOME }}/config_generators/setup.py install"
    chdir: "{{ ansible_env.HOME }}/config_generators"

- name: Copy JSON Sources
  ansible.posix.synchronize:
    src: "{{ driver_generator.json.source_path }}"
    dest: "{{ host_configs_dir }}"
  when: site_info.data_source == 'json'

- name: Run Driver Generator from JSON
  ansible.builtin.shell:
    cmd: "{{ venv_for_ansible }}/bin/config-gen-json.driver {{ host_configs_dir }}/driver_generator_config.json"
    chdir: "{{ ansible_env.HOME }}/config_generators/src/volttron/haystack/parser/driver/"
  register: generator_return_json
  failed_when: generator_return_json.rc < 0 or generator_return_json.rc > 1
  when: site_info.data_source == 'json'

- name: Report Generator Errors from JSON
  ansible.builtin.copy:
    dest: driver_issues.json
    content: "{{ generator_return_json.stderr }}"
  when: generator_return_json.rc  | default('') == 1

- name: Run Driver Generator from Database
  ansible.builtin.shell:
    cmd: "{{ ansible_python_interpreter }} config_intellimation.py {{ host_configs_dir }}/driver_generator_config.json"
    chdir: "{{ ansible_env.HOME }}/config_generators/src/volttron/haystack/parser/driver/intellimation"
  register: generator_return_db
  failed_when: generator_return_db.rc < 0 or generator_return_db.rc > 1
  when: site_info.data_source == 'db'

- name: Report Generator Errors from Database
  ansible.builtin.copy:
    dest: driver_issues.json
    content: "{{ generator_return_db.stderr }}"
  when: generator_return_db.rc | default('') == 1

- name: Fetch Generator Error Report
  ansible.builtin.fetch:
    dest: "{{ generator_reports_dir }}/{{ inventory_hostname }}/driver_issues.json"
    src: "{{ host_configs_dir }}/drivers/unmapped_device_details" # driver_issues.json
    flat: yes
  when: (generator_return_json.rc is defined and generator_return_json.rc == 1) or (generator_return_db is defined and generator_return_db == 1)

- name: Find Generated Files
  ansible.builtin.find:
    paths: "{{ host_configs_dir }}/drivers"
    excludes: "unmapped_device_details"
  register: driver_configs

- name: Load VOLTTRON Driver Configurations
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: driver_config_set
  with_items: "{{ driver_configs.files }}"

- name: Install Config Set
  include_tasks: install_config.yml
  loop: "{{ driver_config_set.results | map(attribute='content') | map('b64decode') | map('from_json') }}"

- name: Install Driver Agent
  volttron.deployment.volttron_agent:
    volttron_root: "{{ volttron_root }}"
    volttron_home: "{{ volttron_home }}"
    volttron_venv: "{{ volttron_venv }}"
    agent_vip_id: "platform.driver"
    agent_spec: "{{ this_spec }}"
  vars:
    - this_spec: {
                   agent_source: "{{ volttron_root }}/services/core/PlatformDriverAgent",
                   agent_state: 'present',
                   agent_enabled: True,
                   agent_priority: 30,
                   agent_running: true,
                   agent_tag: 'driver',
                   skip_requirements: False,
                   force_install: False
                 }
